
======================================== CSS ======================================

Interesting Learning:-
----------------------
1. we can use custom background color -> Color Hunt[website] and get a hex value.

2. css-colors mdn -> to get color chart.

3. there is always a default styling applied by browser. ( css default values)

4. every tag are boxes even <hr> is also.

5. Pesticide is a plugin used to see all the boxes in browser.

6. to make css look good in mobile,tab etc we should not give hardcorded values like width: 100px
	we should give data in percentage. width: 100%

7. we link sylesheet to the webpage head.
	<link rel="stylesheet" href=""> 

8. folder/file means - in the same level.
/folder/file  means  root/folder/file.

9. which one is most prior/important to browser if we style the same tag internally/externally and inline.
	ans. inline css than internal and last external.

to make choice we can inspect and untick the style we dont required but it will not change the code it just for visualizing locally.
for changing the code we need to remove the lines.

suggested :- always style your css in external sheet.

10. best practice is to write all your property in tag in alphabetically.

11. Emojipedia - for source of image for different emojis. 

12. we can add two classes to the same element 
	example: <img class="broccoli circular" src="#">
	
	In css file:  	.broccoli()
			.circcular()
	
	but it is not applicable in id.

13. sudo classes like :hover, :active etc.

--------------------------------------------------------
Notes: 

=> we can get css by 3 ways.

- Inline
- header section.
- External



1.Inline:-

	<body style="background-color: blue;">

disavantages : its very difficult to go and change styling in every tag if required.


2. Head Section:-

<head>
	<style>
		body{
			background-color: blue;
			
		}
	</style>
</head>

disadvantage : it is difficult to change all the styling in more than >500 web pages individually.


3. External :-	

<head>
	<link rel="stylesheet" href="style.css">
</head>


--- how to debug the css.

Approach 1: line by line debugging.
Approach 2: Crome Developer Tool.

inspect or chrome -> View -> developer ->developer tools. 

console will show error.

--- the grammar of css syntax.

	selector{property : value;}

--- css selector

	To group the elements and style them.

	- if you use tag name it will be applied to all the elements having same tag.
	- but for specific elements there are two different method  of selection
		class (.tag)
		id	(#tag)

	class = for styling one and more elements having same requirement.
	id = id is unique for every element we can use it to style elements uniquely.

---sudo classes - having : in front example= :hover used to change the state.
	
	 how to use? 
		img:hover{}

--- uppercase /lower case

text-transform: uppercase;

--- letter-spacing = for spaceing between letters.
letter-spacing: 20px;

--for underline

text-decoration: (wavy) (color) underline

type color underline.


--------------------------------------------------------------------

we have to make this-> 	...

...........
.	  .	// background-color: white; border-style: dotted; height: 1px;
...........

hr{
	border-color: grey;
	border-style: dotted none none; 		// none for left/right and bottom.
	// or border-style: none; border-top-style: dotted;
	height: 0px;
	width: 5%;
	border-width: 5px;
}


h1, h3{
	color: green;
}

=================================================== Intermediate CSS =============================

Interesting learning
---------------------

1. Favicon = favorite icon (showup in browser upside where title is shown)

favicon.cc to  create a favicon.

2. viewport is screen we are watching[mobile/pc/tablets].
3. padding, border increases the size.
4. padding applied the content not images like background image.
5. margin give space outside the element.
6. we can make an element hidden by two ways.
	- display: none;
	- visibility: hidden;
7. relative = changes relative to its old position.
	absolute = changes relative to parent[if there is no parent than body is parent].
8. two types of font style.
	San-Serif - having no style in corner.
	Serif	- having stye in corner.
	monospace - easy to read.

9. CSS font stack = To download the fallback of fonts [if our font is not avaiable in other os then other font will be used].
	ex- font-family: verdana, sans-serif;

10. if you want to make sure that people will se you font style use = font embedding.
	Google font [free and can be embed easily]

	how to embed 
	- provide link in header section similar to sylesheet.

11. loren ipsum dolor is used as a demo content so that you can create pages for content similar to that.
12. Flaticon.com for icons.
13. Giphy.com for better gif.
14. 16px = 100% = 1em.[percentage/em is used to make font dynamic.]
15. if they both are having static font size then it will take child size.
	if font size are dynamic for parent and child then it will first take size of parent and then on top of it child font size.
	
	to solve this problem we have rem(root em).
	it will change the size on the top of parent size.

suggested : rem

16. line-height: spacing between text.
17. frontendmentor.io for learning and practicing frontend.





--------------------------------------------------------------------------------------------
Notes:- 

div = content division element allows you to divide your content in several boxes.

---css box model----
1. margin
2. border
3. padding
4. content

--- Display --------
1. Block  			=> width = 100%  

	[pro: we can change the width 
	con: every element comes in another line.]

2. inline 			=> width can't be change the width
	
	[pro: we can get the other element in same line 
	con: we can't change the  width]

3. inline-Block 	=> it will make the element in inline and are in block 
	[pro: we can get the element in inline and can change the width]

4. none  => it removes or hide the element.

Common block element
--------------------
1. Paragraph 	<p>   
2. header 		<h1>...<h6>
3. division 	<div>
4. list 		<ol>, <ul>, <li>
5. forms 		<form>

common inline Display element
-----------------------
1. span 	<span>
2. image 	<img>
3. anchor	<a>

-- CSS Positioning
Rules
1. Content is everything.  = it will determine the height ,width .


2. Order Comes from Code.	=  whatever you code the same order will be followed like
								<img><h1> will show you image first than heading.

- cascade means order and it matters in styling.
	
	ex:

	h1{ background-color: yellow}
	h1{ background-color: purple}

	so background-color will be purple.

	* more specific will win

	section h1{
		background-color: black;
	}
	so background-color will be black.

	specific
	---------
	id> class> elements


3. Chidren Sit on Parents = <div> <h1> <span>
							element on screen.

-- Position 

1. Static			: Default html
2. Relative			: change in natural postition using top/bottom/left/right.
						- it doesn't effect layout other elements position in screen.
						- if we shift the element outside the screen it will disapper 
							because it is relative to its old position.
3. Absolute			:  	- if we shift the element to outside the screen it came from other side
							because it is relative to parent.
						- it affects the positioning of other elements.
4. Fixed			:  the position of element is fixed in  screen for example: navbar.


-- text align: center 
when we do text align center the content of element move to center.
it is applicable if all content having same width.

case : if width are different than we can change the margin.
-- margin: auto  = is used to make the content in center.


// font properties

font-family = for different font styles.
font-size

-- float and clears

float : suggested to use only for wrapping text around an element.
do not use it unnecessarily because it has many corner cases. [values: left/right/top/bottom]

clear : it is used for unwrapping text. [values: left/right/top/bottom]

Selectors
=========

1. class		(.)
2. id			(#)
3. element		( h1{} )
4. everything   (*)
5. selector list   ( h1,h2,h3{} )
6. Descendent selector   ( li a{} )  = for all <a> nested  inside li
7. Adjacent & Direct-Descendent selectors  

- (h1 + p{}) = Paragraph immideatly preceeding by h1
- ( div > li {} ) = li's that are direct child of div

input[type="text"]:nth-of-type(2n){
	for every second text input.
}

8. Attribute selector ( input[type=""]{} )

attribute*=   starting with
attribute$=    ending with
attribute~=    contains 


9. Pseudo element = keyword added to selector that lets you style a particular part  of selected elements.
- ::after
- ::before
- ::first-letter
- ::first-line
- ::selection  =  p::selection{ background-color: yellow;} if we select paragraph the selection color will be yellow.

example: we can use them to increse font size of first letter of  h1.



