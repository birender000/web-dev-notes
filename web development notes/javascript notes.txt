======================================= javascript ===============================
1.  ECMAScript is other name of javascript.

2. java and javascript both are different
    java is compiled based language whereas javascript is interpreted language.
    
3. javascript is supported by every browser.

4. its a script like we see in movies every element have some line to follow that's why it is known as javascript

5. where we can write javascript without ide.

  chrome developer :- in console we can write code line by line but every time we need to click shift+enter then it will go in next line and run every line one by one
                      there is problem suppose if we don not click shift+ enter  then we will loose our code.
                      
                      other method is  in developer on left corner >> go to snippets -> new snippets
 
 > Javascript is synchronous and single threaded language. every line of code executed one by one and one after another.
 
 
 > Javascript can be used for changing:    
    1. text content  [ document.getElementById('').innerHtml = "ajsdn" ]
    2. using attributes [ document.getElementById('').src = "cool.jpeg" ]
    3. style [document.getElementById('').style.display="none"]
    
 > where to
 ===========
 using <script> tag
  1. head : <script src="">
  2. body : <script>
    
 
 
 
 ========================================================================= Namaste javascript ====================================================================

======================
HOW JAVA SCRIPT WORK
=====================
 
 > there is a term called global Execution context. which is created when code go for interpretions.
 > it comprises of two things 
        a> memory creation
        b> code execution
 > in memory creation phase variables and functions got memory who are declared.
    example 
    
        var x = 10;
        a();
        second = b();
        
        function a(){
           var x = 20;
        }
        
        function b(){
            var x = 20
        }
        
                        Global Execution Context
        
        Memory                                          Code Execution
        =================================================================
        x = undefined                                   x = 10
        a = function{ copy of whole function}           Execution context for a()
        second: undefined                               Execution context for b()
        
        
        call stack
        ==========
        
        stage 1.    GEC  [Global Execution context]
        
        stage 2.    a()
                    GEC
        
        after execution a() will be vanished
        
        stage 3.    b()
                    GEC
        after execution b() will be vanished
        
        after execution GEC will be vanished
                    
   
 > in code execution phase lines of codes or threads are executed one by one.
 
 > if there are multiple functions in code or function inside function [like reccursion]
 then an call stack is created with execution context at the end and will pop at the end of execution of code.

=======================
 HOISTING IN JAVASCRIPT
=======================

 > it is default behaviour of javascript to use the variables or call the functions before they are declared. [it is related to declaration not with intialization]
 > it is because the first phase is memory allocation in which meomory allocated to variables and functions which are declared.
 
 
==========================================
Shortest js program [when file is empty]
===========================================

javascript engine automatically created object and global execution context even if there is no code of line.

Q. what is window?
    window is an  object created with global execution context automatically.
    
Q. what is this?
    this === window [in global execution context]
    
    this refers to the object of execution context.
    
 Q. what is global space?
    code line which is not inside any function is in global space.
    
 > if we write anything after window js engine will try to  find that  function  or variable in global space.
 
    example 1.>   var x = 10
                  window.x will give 10 
                  or 
                  x will also give 10 
                  or 
                  this.a will also give 10
                
    example 2.>  windows.alert() 
                 we can also write is alert()
                 
=======================            
 Defined vs undefined
======================
 
  > when the memory is allocated to variable then it is assigned as undefined but if there is no variable declared then it is called not defined and show error if u use it.
 
Q. what is undefined?
    when memory is allocated to declared variable but no value is assigned. it is kind of placeholder.
   
Q. what is not defined?
    when variable is not declared.
    
 
Q. javascript is a loosly/weakly type language. why?
    because it is not very specific about its datatypes.
    ex. var = "kdsfk"
        var = 10
        var = 10.45

> never do  a = undefined. why?
   its not a good practice.

==================
THE SCOPE CHAIN
==================

> what is scope?
    scope is kind of accessebility for example scope for a varible is where it can be accessed.

> What is lexical environment?
    lexical means heirarchy. is created when execution context is created.
    lexical environment comprises of [local memory  along with lexical environment] of parent.

> lexical environment of global execution context is null.
    
    
    Memory                          code execution
    ================================================
    >some env. variables         some code of lines
    >lexical environment
        having local memory 
        along with 
        lexical env. of parent
        
  Q. what is scope chain?
        when there are more than one execution context and are lexical than an scope chain is created.
        
        in this example scope chain created is    =      gec - a() - b()
        
        for example.
        
            var a=10;
            a();
            console.log(b);                 // not defined
            
            function a(){
                var b = 20 ;
                b();
                function b(){
                    console.log(a);          //  10
                }
            }
    
  
  ======================================
  Let / const and temporal dead zone
  ======================================
  
> what is temporal dead zone?
    the time duration between memory allocation and assignment of a let and const is called temporal dead zone.
    
    let and const are allocated memory in different memory space called script. but we can access them when they 
    are intialized.
    
 > difference between let and const and var
 
    flexible                                strict                              more strict
    var                                     let                                      const 
    =============================================================================================
    can be declared more                    declared only once                  declared and assigned only once
    than one time.                          in a block.                          in a block.

        
        
    suggestion>  use let and const.  
                    always declare and intialize  let/const at top otherwise there will be lots of error.
 
=============
BLOCK SCOPE
==============
 
 {
    // it is known as block scope.
 }
 
 > block scope is used when we need to group multiple statement where syntax required only single statements.
     
     for example: 
 
        if(condition)
            print()    // if required only one statement
        
        // but if we required more than one statements than we use block scope.
        
       
 > the let/const inside block scope get memory in block not is global or script.
 
 for example: 
 
    let a=10;
    {
        var a=20;       // wrong because a is already there in global scope
        let a=20;       // right because it will be created in local block memory  and is also called shadowing
    }
    
  
  > shadowing : it means again declaring and assigning value to variable which is already present shown in above example which gives output right.
  > illegal shadowing: we can only shadow which is in his block.  example given above which output wrong.
  
  
  
                    
   
        
      
    


