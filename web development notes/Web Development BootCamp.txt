
================================== Front-end Web Development =====================

-----------------------------Extension(vs-code)----------------------
	prettier
	formulahendry-auto-close-tag
	shinn.stylelint
	dbaeumer.vscode-eslint
	dbaeumer.jshint
	naumovs.color-highlight
	DigitalBrainstem,javascript-ejs.support

	file-icons
	erikphansen-vscode-toggle-column-selection
	ritwickdey.liveServer



Interesting learning
----------------------

1. shortcut for boiler code : type html + enter

	Boiler Code-
	-----------
	
	<!DOCTYPE html>
	<html>
		<head>
			<meta charset="utf8">
			<title></title>
		</head>

		<body>
		</body>
	</html>

2. How internet work? 


				server(its like a library)	
						||				
===========================================================================
			Internet backbone
============================================================================
	||
	client


|client|== send request =>>|router|== send request =>>|modem|== send request =>>|ISP|== send request =>>|DNS|== locate IP address => browser 

	- client send request(www.Google.com) to router
	- router send the request to  modem
	- modem send the request to companies special router [	ISP(Internet Service Provider) ].
	- ISP send the request to DNS(Domain Name Server)[its like a phone book]
	- DNS locates and maintain the table of the IP Address 
	- browser send the ip address to internet backbone.
	- Server gives the respose.


3. How do website actually works?

	Html 		->	Building house structure
	CSS			->	Painting walls
	JavaScript 	-> 	functionalities like adding switchings and electricity,water pipelines

4. Internet Archive -> to check how websites look like in old days.

5. Shortcut for emojis

	windows + . 
	windows + ;

6. <meta name="discription" content=""> = search engine shows the content in description.

7. forms provide various input and types.

8. for hoisting we can use github.

========================================== HTML ==================================================


Notes:
	Hyper text markup language.

	markup -> giving tags to content.
	HyperText -> a bunch of text that can be link together.


-----------------------------------Resources---------------------

		editor[for practice] -> codepen

		resources to learn html 
		-----------------------

		1. mdn -> morzilla developer network.
		2. w3school
		3. devdocs.io


---------------------------------tags-------------------

Notes: 

two types of tags-

1. open and close tag 	example <h1></h1>
2. self closing		example <br>, <hr>

	<hr size="3">

	hr 	=  	html element
	size 	= 	attribute (modification to the default element)

	
-----------------------------------------------------------------------------------------

create a folder ------->HTML - Personal Site
create a file ------->  Index.html (homepage)



---------------------------------------meta-----------------------------------
Note:

	

	head -> provides the details about page.
	meta -> give associated data to document.

	<meta charset="utf8">	=	used for standard encoding
	<meta name="discription" content=""> = search engine shows the content in description.
---------------------------------------------------------------------------------------



-----------------------------How to structure text in html--------


<!DOCTYPE html>
<html>
	<head>
		<meta charset="utf8">
		<title>Birender Website</title>
	</head>

	<body>
		<img src="#" alt="birender profile picture">
		<h1>Birender</h1>
		<p><em>Program Analyst Trainee @ <strong><a href="#">Cognizant</a></strong></em></p>
		<p>I am Azure and web developer.</p>
		<hr>
		<h3>Education</h3>
		<ul>
			<li>K.V Haldwani</li>
			<li>K.V ITBP</li>
		</ul>
		<h3>My Hobbies</h3>
		<ol>
			<li>Watching Movies</li>
			<li>Development</li>
		</ol>	
	</body>
</html>

---------------------------------em/italic/bold/strong--------------------

Note: 	use <em> instead of <i> 
	use <strong> instead of <b> 
	because they give more meaning not only styling.

--------------------------------------hr/br-------------------------	
	
	hr -> horizontal rule.
	br-> break line

---------------------------------------List-------------------------
	
	list are of two type
	<ul> - unorder list
		<li> - list item
	<ol> - ordered list

	<img src=""> - self closing element and always required source. 
	
	alt => used for telling the about the image if not render and also help google
		to find if there any searches related to that text.
	
	<a href=""> - anchor tag used for linking pages.
	href is hyperlink refrence.- link destination.


================================================= Intermediate HTML ==================
Interesting facts
------------------

1. <sup></sup> = superscript, <sub></sub> = subscript.
2.  HTML Entities : some reserved keywords used 
	- start with & ends with ; 
	- use to display reserved keywords normally invalid.
	- browser interprets them and render the correct character instead.

	1<3 : it means one is smaller than 3 and smaller is reserved keyword but if you just want to use that 
	symbol in your html page use its entity code [just example may be wrong (&lt;) for (<)]

3. dev.w3.org chart for html entity codes.
4. name attribute is used to send the data to server. 

	it is just like intializing a variable and providing it value. and sending request to server.

	example  name: <input type="text" name="uname">  

	browser->   name: Har
	so when we provide name to this box from browser than it will go like (uname=Har)

5. In checkboxes  it have name="" for different options because it can check more than one.   it sends request as [on or off only]
6. In radio name will be same but value may be differ. 	[it sends text values  as request.]
7. Dropdown : <Select name="" > <option  value="" >

Radio and dropdown are same but dropdown is good to hide options in page.



--------------------------------------

<h3>Skills</th3>
<table>
	<tr>
		<td>ios Development</td>
		<td>⭐⭐⭐⭐⭐</td>
	<tr>
		<td>ios Development</td>
		<td>⭐⭐⭐⭐</td>
	</tr>
	<tr>
		<td>ios Development</td>
		<td>⭐⭐⭐⭐⭐</td>
	</tr>
	
</table>

------------------------------------------- Table ----------

Note: 	tr = table row
	td = table data
	th = table head[by default bold]


	thead = table head [for column title name] 
	tfooter = table footer
	tbody = table body

	- we use thead/tfooter/tbody to style the data easily at one time.
	- we can only add atribute to table tag.

	cellspacing : to increse and decrease spacing between cell.


Disadvantages : it can be very complex.

so we can use css.
-------------------------------------------- Html Form-----------

<form>
	<table>
		<tr>
			<td><label>Your Name:</label></td>
			<td><input type="text"></td>
		</tr>
		<tr>
			<td><label>Your Email</label></td>
			<td><input type="email"></td>
		</tr>
		<tr>
			<td><label>Your Message:</label></td>
			<td><textarea rows="10" cols="30"></textarea></td>
		</tr>
		<tr>
			<td colspan="2"><input type="submit" value="submit"></td>
		</tr>
	</table>
</form>


---------------------------------------------------------------

Note: form has
	-action ="mailto:xyz@gmail.com"
	-method
	-input = selfclosing tag and having a lot of type.
	-label 

	INPUT TYPE
	--------
	=> type = text;
	=> type = submit;
	=> type = file;
	=> type = date;
	=> type = radio;
	=> type = range;   value="" // for default      min="" max"" // for range  	step="" // increase by
	=> type = checkbox;
	
-------------------------------------------------------------------
why we use name and value attribute?
- we will learn this in javascript.
--------------------------------------------------------------------

======================================== CSS ======================================

Interesting Learning:-
----------------------
1. we can use custom background color -> Color Hunt[website] and get a hex value.

2. css-colors mdn -> to get color chart.

3. there is always a default styling applied by browser. ( css default values)

4. every tag are boxes even <hr> is also.

5. Pesticide is a plugin used to see all the boxes in browser.

6. to make css look good in mobile,tab etc we should not give hardcorded values like width: 100px
	we should give data in percentage. width: 100%

7. we link sylesheet to the webpage head.
	<link rel="stylesheet" href=""> 

8. folder/file means - in the same level.
/folder/file  means  root/folder/file.

9. which one is most prior/important to browser if we style the same tag internally/externally and inline.
	ans. inline css than internal and last external.

to make choice we can inspect and untick the style we dont required but it will not change the code it just for visualizing locally.
for changing the code we need to remove the lines.

suggested :- always style your css in external sheet.

10. best practice is to write all your property in tag in alphabetically.

11. Emojipedia - for source of image for different emojis. 

12. we can add two classes to the same element 
	example: <img class="broccoli circular" src="#">
	
	In css file:  	.broccoli()
			.circcular()
	
	but it is not applicable in id.

13. sudo classes like :hover, :active etc.

--------------------------------------------------------
Notes: 

=> we can get css by 3 ways.

- Inline
- header section.
- External



1.Inline:-

	<body style="background-color: blue;">

disavantages : its very difficult to go and change styling in every tag if required.


2. Head Section:-

<head>
	<style>
		body{
			background-color: blue;
			
		}
	</style>
</head>

disadvantage : it is difficult to change all the styling in more than >500 web pages individually.


3. External :-	

<head>
	<link rel="stylesheet" href="style.css">
</head>


--- how to debug the css.

Approach 1: line by line debugging.
Approach 2: Crome Developer Tool.

inspect or chrome -> View -> developer ->developer tools. 

console will show error.

--- the grammar of css syntax.

	selector{property : value;}

--- css selector

	To group the elements and style them.

	- if you use tag name it will be applied to all the elements having same tag.
	- but for specific elements there are two different method  of selection
		class (.tag)
		id	(#tag)

	class = for styling one and more elements having same requirement.
	id = id is unique for every element we can use it to style elements uniquely.

---sudo classes - having : in front example= :hover used to change the state.
	
	 how to use? 
		img:hover{}

--- uppercase /lower case

text-transform: uppercase;

--- letter-spacing = for spaceing between letters.
letter-spacing: 20px;

--for underline

text-decoration: (wavy) (color) underline

type color underline.


--------------------------------------------------------------------

we have to make this-> 	...

...........
.	  .	// background-color: white; border-style: dotted; height: 1px;
...........

hr{
	border-color: grey;
	border-style: dotted none none; 		// none for left/right and bottom.
	// or border-style: none; border-top-style: dotted;
	height: 0px;
	width: 5%;
	border-width: 5px;
}


h1, h3{
	color: green;
}

=================================================== Intermediate CSS =============================

Interesting learning
---------------------

1. Favicon = favorite icon (showup in browser upside where title is shown)

favicon.cc to  create a favicon.

2. viewport is screen we are watching[mobile/pc/tablets].
3. padding, border increases the size.
4. padding applied the content not images like background image.
5. margin give space outside the element.
6. we can make an element hidden by two ways.
	- display: none;
	- visibility: hidden;
7. relative = changes relative to its old position.
	absolute = changes relative to parent[if there is no parent than body is parent].
8. two types of font style.
	San-Serif - having no style in corner.
	Serif	- having stye in corner.
	monospace - easy to read.

9. CSS font stack = To download the fallback of fonts [if our font is not avaiable in other os then other font will be used].
	ex- font-family: verdana, sans-serif;

10. if you want to make sure that people will se you font style use = font embedding.
	Google font [free and can be embed easily]

	how to embed 
	- provide link in header section similar to sylesheet.

11. loren ipsum dolor is used as a demo content so that you can create pages for content similar to that.
12. Flaticon.com for icons.
13. Giphy.com for better gif.
14. 16px = 100% = 1em.[percentage/em is used to make font dynamic.]
15. if they both are having static font size then it will take child size.
	if font size are dynamic for parent and child then it will first take size of parent and then on top of it child font size.
	
	to solve this problem we have rem(root em).
	it will change the size on the top of parent size.

suggested : rem

16. line-height: spacing between text.
17. frontendmentor.io for learning and practicing frontend.





--------------------------------------------------------------------------------------------
Notes:- 

div = content division element allows you to divide your content in several boxes.

---css box model----
1. margin
2. border
3. padding
4. content

--- Display --------
1. Block  			=> width = 100%  

	[pro: we can change the width 
	con: every element comes in another line.]

2. inline 			=> width can't be change the width
	
	[pro: we can get the other element in same line 
	con: we can't change the  width]

3. inline-Block 	=> it will make the element in inline and are in block 
	[pro: we can get the element in inline and can change the width]

4. none  => it removes or hide the element.

Common block element
--------------------
1. Paragraph 	<p>   
2. header 		<h1>...<h6>
3. division 	<div>
4. list 		<ol>, <ul>, <li>
5. forms 		<form>

common inline Display element
-----------------------
1. span 	<span>
2. image 	<img>
3. anchor	<a>

-- CSS Positioning
Rules
1. Content is everything.  = it will determine the height ,width .


2. Order Comes from Code.	=  whatever you code the same order will be followed like
								<img><h1> will show you image first than heading.

- cascade means order and it matters in styling.
	
	ex:

	h1{ background-color: yellow}
	h1{ background-color: purple}

	so background-color will be purple.

	* more specific will win

	section h1{
		background-color: black;
	}
	so background-color will be black.

	specific
	---------
	id> class> elements


3. Chidren Sit on Parents = <div> <h1> <span>
							element on screen.

-- Position 

1. Static			: Default html
2. Relative			: change in natural postition using top/bottom/left/right.
						- it doesn't effect layout other elements position in screen.
						- if we shift the element outside the screen it will disapper 
							because it is relative to its old position.
3. Absolute			:  	- if we shift the element to outside the screen it came from other side
							because it is relative to parent.
						- it affects the positioning of other elements.
4. Fixed			:  the position of element is fixed in  screen for example: navbar.


-- text align: center 
when we do text align center the content of element move to center.
it is applicable if all content having same width.

case : if width are different than we can change the margin.
-- margin: auto  = is used to make the content in center.


// font properties

font-family = for different font styles.
font-size

-- float and clears

float : suggested to use only for wrapping text around an element.
do not use it unnecessarily because it has many corner cases. [values: left/right/top/bottom]

clear : it is used for unwrapping text. [values: left/right/top/bottom]

Selectors
=========

1. class		(.)
2. id			(#)
3. element		( h1{} )
4. everything   (*)
5. selector list   ( h1,h2,h3{} )
6. Descendent selector   ( li a{} )  = for all <a> nested  inside li
7. Adjacent & Direct-Descendent selectors  

- (h1 + p{}) = Paragraph immideatly preceeding by h1
- ( div > li {} ) = li's that are direct child of div

input[type="text"]:nth-of-type(2n){
	for every second text input.
}

8. Attribute selector ( input[type=""]{} )

attribute*=   starting with
attribute$=    ending with
attribute~=    contains 


9. Pseudo element = keyword added to selector that lets you style a particular part  of selected elements.
- ::after
- ::before
- ::first-letter
- ::first-line
- ::selection  =  p::selection{ background-color: yellow;} if we select paragraph the selection color will be yellow.

example: we can use them to increse font size of first letter of  h1.


======================================================== BootStrap ==========================================

bootstrap is a Frontend library. 

1. It is opensource and free available in github [second most famous repository in github]
2. Responsive : bootstrap make easy to make a website adaptive for different client[mobile, desktop etc.]
3. It provide pre-styled elements.

Interesting facts:
--------------------
0. Twitter created bootstrap.
1. Codeply.com  website to practice bootstap and other framework.
2. In bootstrap we already have css classes we need to just use these classes in our html.
3. We can use example layout as well.
4. cdn = content deliviry network . bootstrap is in every cdn thats why it quickly provide respose.

---- ways of installing bootstrap.

-use documentaion.
1. copy the <link> from boot strap website and add it to <head>.
2. If you are making website from scratch use starter template.
3. Download bootstrap and give its url in href.[if internet is not working :) ] but it may have more latency.


suggested: 1 or 2

----------------- Wireframing-------

Wireframing: it is the first step of development. to first make design using pencil and paper.
Mockup: screenshots of what you need. from others layout

Awwwards.com[website] : to see the and inspire from the layout whaich are already made by someone.
UI Patterns [website] : design patterns and problems we are facing while designing and how other solve that.
dribble.com : people created design with animation.

Balsamiq cloud[account for 30days]: to do Wireframing. 
or printout from sneekpeak.com and draw from hand.

